use itertools::Itertools;
use log::trace;
use std::convert::TryFrom;
use std::{error::Error, fs::OpenOptions, io::prelude::*, path::PathBuf};

#[derive(Copy, Clone, Debug, PartialEq)]
pub enum ExportFormat {
    SVG,
    PNG,
}

impl Default for ExportFormat {
    fn default() -> Self {
        ExportFormat::SVG
    }
}

pub struct Exporter {
    qr_code: qrcodegen::QrCode,
    output: PathBuf,
    border: u8,
    format: ExportFormat,
    file_name: String,
    scale: u8,
    no_rect: bool,
    foreground: (u8, u8, u8),
    background: (u8, u8, u8),
}

impl Exporter {
    pub fn new(
        qr_code: qrcodegen::QrCode,
        output: PathBuf,
        border: u8,
        format: ExportFormat,
        file_name: String,
        scale: u8,
        no_rect: bool,
        foreground: (u8, u8, u8),
        background: (u8, u8, u8),
    ) -> Self {
        Exporter {
            qr_code,
            output,
            border,
            format,
            file_name,
            scale,
            no_rect,
            foreground,
            background,
        }
    }

    pub fn export(&mut self) -> Result<(), Box<dyn Error>> {
        self.output.push(&self.file_name);

        match self.format {
            ExportFormat::SVG => {
                self.output.set_extension("svg");
                trace!("Writing svg file {}", self.output.display());
            }
            ExportFormat::PNG => {
                self.output.set_extension("png");
                trace!("Writing png file {}", self.output.display());
            }
        }

        let mut writer = OpenOptions::new()
            .write(true)
            .create(true)
            .append(false)
            .open(&self.output)?;

        match self.format {
            ExportFormat::SVG => self.export_svg(&mut writer, &self.qr_code, self.border),
            ExportFormat::PNG => {
                self.export_png(&mut writer, &self.qr_code, self.border, self.scale)
            }
        }?;

        Ok(())
    }

    fn export_svg<W: Write>(
        &self,
        writer: &mut W,
        qr_code: &qrcodegen::QrCode,
        border: u8,
    ) -> Result<(), Box<dyn Error>> {
        let svg = self.to_svg_string(qr_code, i32::from(border), self.no_rect);

        trace!(
            "version = {:?}, errorcorrectionlevel = {:?}, mask = {:?}",
            qr_code.version().value(),
            match qr_code.error_correction_level() {
                qrcodegen::QrCodeEcc::High => "High",
                qrcodegen::QrCodeEcc::Low => "Low",
                qrcodegen::QrCodeEcc::Quartile => "Quartile",
                qrcodegen::QrCodeEcc::Medium => "Medium",
            },
            qr_code.mask().value(),
        );

        writer.write_all(svg.as_bytes())?;
        Ok(())
    }

    /// Returns a string of SVG code for an image depicting
    /// this QR Code, with the given number of border modules.
    ///
    /// The string always uses Unix newlines (\n), regardless of the platform.
    fn to_svg_string(&self, qr_code: &qrcodegen::QrCode, border: i32, no_rect: bool) -> String {
        assert!(border >= 0, "Border must be non-negative");
        let mut result = String::with_capacity(1024);

        result += "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
        result += "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n";
        let dimension = qr_code
            .size()
            .checked_add(border.checked_mul(2).unwrap())
            .unwrap();
        result += &format!(
			"<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 {0} {0}\" stroke=\"none\">\n", dimension);

        if !no_rect {
            result += &format!(
                "\t<rect width=\"100%\" height=\"100%\" fill=\"#{:02X}{:02X}{:02X}\"/>\n",
                self.background.0, self.background.1, self.background.2
            );
        }

        result += "\t<path d=\"";
        for y in 0..qr_code.size() {
            for x in 0..qr_code.size() {
                if qr_code.get_module(x, y) {
                    if x != 0 || y != 0 {
                        result += " ";
                    }
                    result += &format!("M{},{}h1v1h-1z", x + border, y + border);
                }
            }
        }
        result += &format!(
            "\" fill=\"#{:02X}{:02X}{:02X}\"/>\n",
            self.foreground.0, self.foreground.1, self.foreground.2
        );
        result += "</svg>\n";
        result
    }

    fn export_png<W: Write>(
        &self,
        writer: &mut W,
        qr_code: &qrcodegen::QrCode,
        border: u8,
        scale: u8,
    ) -> Result<(), Box<dyn Error>> {
        // Make everything a bit simpler to work with.
        let scale = i32::from(scale);
        let border = i32::from(border);

        // Set the colour type and get the samples per pixel.
        let colour_type = png::ColorType::Rgb;
        let colour_type_samples = colour_type.samples();

        // Get the size of the code.
        let size = Some(qr_code.size()).checked_size(scale, border);

        // Multiple by the colour sample length.
        let data_length = size.checked_length(colour_type_samples);

        if size.is_some() && data_length.is_some() {
            // Both are some, so this is OK.
            let size = size.unwrap();
            let data_length = data_length.unwrap();

            let mut encoder = png::Encoder::new(writer, size as u32, size as u32);
            encoder.set_color(colour_type);
            encoder.set_depth(png::BitDepth::Eight);

            let mut writer = encoder.write_header()?;
            let mut data = vec![255_u8; data_length as usize];

            if self.background != (255, 255, 255) {
                trace!("Setting background {:?}", self.background);
                for chunk in data.chunks_exact_mut(3) {
                    chunk[0] = self.background.0;
                    chunk[1] = self.background.1;
                    chunk[2] = self.background.2;
                }
            }

            trace!(
                "version = {:?}, errorcorrectionlevel = {:?}, mask = {:?}, size = {}, data length = {}",
                qr_code.version().value(),
                match qr_code.error_correction_level() {
                    qrcodegen::QrCodeEcc::High => "High",
                    qrcodegen::QrCodeEcc::Low => "Low",
                    qrcodegen::QrCodeEcc::Quartile => "Quartile",
                    qrcodegen::QrCodeEcc::Medium => "Medium",
                },
                qr_code.mask().value(),
                size,
                data_length,
            );

            let offset_fn = |x: i32, y: i32, s: i32, cts: usize| -> usize {
                (x as usize * cts) + (y as usize * (s as usize * cts))
            };

            // this does not combine with itself so zip with (size,size).
            let points = (0..size)
                .tuple_combinations::<(_, _)>()
                .chain((0..size).zip(0..size));

            for point in points {
                let offset_yx = offset_fn(point.1, point.0, size, colour_type_samples);
                let offset_xy = offset_fn(point.0, point.1, size, colour_type_samples);

                if qr_code.get_module(point.1 / scale - border, point.0 / scale - border) {
                    data[offset_yx] = self.foreground.0;
                    data[offset_yx + 1] = self.foreground.1;
                    data[offset_yx + 2] = self.foreground.2;
                }

                if qr_code.get_module(point.0 / scale - border, point.1 / scale - border) {
                    data[offset_xy] = self.foreground.0;
                    data[offset_xy + 1] = self.foreground.1;
                    data[offset_xy + 2] = self.foreground.2;
                }
            }

            writer.write_image_data(&data)?
        } else {
            Err("size or data length are out of bounds.")?
        }

        Ok(())
    }
}

trait Checked {
    fn checked_size(self, scale: i32, border: i32) -> Option<i32>;
    fn checked_length(self, colour_depth: usize) -> Option<i32>;
}

impl Checked for Option<i32> {
    fn checked_size(self, scale: i32, border: i32) -> Option<i32> {
        if let Some(b) = border.checked_mul(2) {
            Some(self?.checked_add(b)?.checked_mul(scale)?)
        } else {
            None
        }
    }

    fn checked_length(self, colour_depth: usize) -> Option<i32> {
        if let Ok(cd) = i32::try_from(colour_depth) {
            Some(self?.checked_mul(self?)?.checked_mul(cd)?)
        } else {
            None
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn checked_length_should_return_none_for_large_colour_depth() {
        let s = Some(1_i32);
        let res = s.checked_length(usize::max_value());

        assert_eq!(None, res);
    }

    #[test]
    fn checked_length_should_return_none_for_large_self() {
        let s = Some(i32::max_value());
        let res = s.checked_length(2_usize);

        assert_eq!(None, res);
    }

    #[test]
    fn checked_length_should_return_none() {
        let s = Some(22);
        let res = s.checked_length(i32::max_value() as usize);

        assert_eq!(None, res);
    }

    #[test]
    fn checked_size_should_return_none_for_large_border() {
        let s = Some(1_i32);
        let res = s.checked_size(1_i32, i32::max_value());

        assert_eq!(None, res);
    }

    #[test]
    fn checked_size_should_return_none_for_large_add() {
        let s = Some(i32::max_value());
        let res = s.checked_size(1_i32, i32::max_value() - 1);

        assert_eq!(None, res);
    }

    #[test]
    fn checked_size_should_return_none_for_large_scale() {
        let s = Some(2);
        let res = s.checked_size(i32::max_value(), 2);

        assert_eq!(None, res);
    }

    #[test]
    fn should_write_svg_to_buffer() {
        // Arrange.
        let mut buffer: Vec<u8> = Vec::new();
        let qr_code = qrcodegen::QrCode::encode_text("ha", qrcodegen::QrCodeEcc::Low).unwrap();
        let exp = Exporter::new(
            qr_code,
            PathBuf::new(),
            0,
            ExportFormat::SVG,
            "".into(),
            1,
            false,
            (0, 0, 0),
            (255, 255, 255),
        );

        // Act.
        exp.export_svg(&mut buffer, &exp.qr_code, exp.border)
            .unwrap();

        // Assert.
        assert_eq!(
            vec![
                60, 63, 120, 109, 108, 32, 118, 101, 114, 115, 105, 111, 110, 61, 34, 49, 46, 48,
                34, 32, 101, 110, 99, 111, 100, 105, 110, 103, 61, 34, 85, 84, 70, 45, 56, 34, 63,
                62, 10, 60, 33, 68, 79, 67, 84, 89, 80, 69, 32, 115, 118, 103, 32, 80, 85, 66, 76,
                73, 67, 32, 34, 45, 47, 47, 87, 51, 67, 47, 47, 68, 84, 68, 32, 83, 86, 71, 32, 49,
                46, 49, 47, 47, 69, 78, 34, 32, 34, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119,
                46, 119, 51, 46, 111, 114, 103, 47, 71, 114, 97, 112, 104, 105, 99, 115, 47, 83,
                86, 71, 47, 49, 46, 49, 47, 68, 84, 68, 47, 115, 118, 103, 49, 49, 46, 100, 116,
                100, 34, 62, 10, 60, 115, 118, 103, 32, 120, 109, 108, 110, 115, 61, 34, 104, 116,
                116, 112, 58, 47, 47, 119, 119, 119, 46, 119, 51, 46, 111, 114, 103, 47, 50, 48,
                48, 48, 47, 115, 118, 103, 34, 32, 118, 101, 114, 115, 105, 111, 110, 61, 34, 49,
                46, 49, 34, 32, 118, 105, 101, 119, 66, 111, 120, 61, 34, 48, 32, 48, 32, 50, 49,
                32, 50, 49, 34, 32, 115, 116, 114, 111, 107, 101, 61, 34, 110, 111, 110, 101, 34,
                62, 10, 9, 60, 114, 101, 99, 116, 32, 119, 105, 100, 116, 104, 61, 34, 49, 48, 48,
                37, 34, 32, 104, 101, 105, 103, 104, 116, 61, 34, 49, 48, 48, 37, 34, 32, 102, 105,
                108, 108, 61, 34, 35, 70, 70, 70, 70, 70, 70, 34, 47, 62, 10, 9, 60, 112, 97, 116,
                104, 32, 100, 61, 34, 77, 48, 44, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77,
                49, 44, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 50, 44, 48, 104, 49, 118,
                49, 104, 45, 49, 122, 32, 77, 51, 44, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32,
                77, 52, 44, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 53, 44, 48, 104, 49,
                118, 49, 104, 45, 49, 122, 32, 77, 54, 44, 48, 104, 49, 118, 49, 104, 45, 49, 122,
                32, 77, 56, 44, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 57, 44, 48, 104,
                49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 49, 44, 48, 104, 49, 118, 49, 104, 45,
                49, 122, 32, 77, 49, 52, 44, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49,
                53, 44, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 54, 44, 48, 104, 49,
                118, 49, 104, 45, 49, 122, 32, 77, 49, 55, 44, 48, 104, 49, 118, 49, 104, 45, 49,
                122, 32, 77, 49, 56, 44, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 57,
                44, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 50, 48, 44, 48, 104, 49, 118,
                49, 104, 45, 49, 122, 32, 77, 48, 44, 49, 104, 49, 118, 49, 104, 45, 49, 122, 32,
                77, 54, 44, 49, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 56, 44, 49, 104, 49,
                118, 49, 104, 45, 49, 122, 32, 77, 49, 48, 44, 49, 104, 49, 118, 49, 104, 45, 49,
                122, 32, 77, 49, 52, 44, 49, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 50, 48,
                44, 49, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 48, 44, 50, 104, 49, 118, 49,
                104, 45, 49, 122, 32, 77, 50, 44, 50, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77,
                51, 44, 50, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 52, 44, 50, 104, 49, 118,
                49, 104, 45, 49, 122, 32, 77, 54, 44, 50, 104, 49, 118, 49, 104, 45, 49, 122, 32,
                77, 49, 50, 44, 50, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 52, 44, 50,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 54, 44, 50, 104, 49, 118, 49, 104,
                45, 49, 122, 32, 77, 49, 55, 44, 50, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77,
                49, 56, 44, 50, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 50, 48, 44, 50, 104,
                49, 118, 49, 104, 45, 49, 122, 32, 77, 48, 44, 51, 104, 49, 118, 49, 104, 45, 49,
                122, 32, 77, 50, 44, 51, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 51, 44, 51,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 52, 44, 51, 104, 49, 118, 49, 104, 45,
                49, 122, 32, 77, 54, 44, 51, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 56, 44,
                51, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 57, 44, 51, 104, 49, 118, 49, 104,
                45, 49, 122, 32, 77, 49, 48, 44, 51, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77,
                49, 52, 44, 51, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 54, 44, 51, 104,
                49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 55, 44, 51, 104, 49, 118, 49, 104, 45,
                49, 122, 32, 77, 49, 56, 44, 51, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 50,
                48, 44, 51, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 48, 44, 52, 104, 49, 118,
                49, 104, 45, 49, 122, 32, 77, 50, 44, 52, 104, 49, 118, 49, 104, 45, 49, 122, 32,
                77, 51, 44, 52, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 52, 44, 52, 104, 49,
                118, 49, 104, 45, 49, 122, 32, 77, 54, 44, 52, 104, 49, 118, 49, 104, 45, 49, 122,
                32, 77, 56, 44, 52, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 57, 44, 52, 104,
                49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 48, 44, 52, 104, 49, 118, 49, 104, 45,
                49, 122, 32, 77, 49, 52, 44, 52, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49,
                54, 44, 52, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 55, 44, 52, 104, 49,
                118, 49, 104, 45, 49, 122, 32, 77, 49, 56, 44, 52, 104, 49, 118, 49, 104, 45, 49,
                122, 32, 77, 50, 48, 44, 52, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 48, 44,
                53, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 54, 44, 53, 104, 49, 118, 49, 104,
                45, 49, 122, 32, 77, 56, 44, 53, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49,
                49, 44, 53, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 50, 44, 53, 104, 49,
                118, 49, 104, 45, 49, 122, 32, 77, 49, 52, 44, 53, 104, 49, 118, 49, 104, 45, 49,
                122, 32, 77, 50, 48, 44, 53, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 48, 44,
                54, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 44, 54, 104, 49, 118, 49, 104,
                45, 49, 122, 32, 77, 50, 44, 54, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 51,
                44, 54, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 52, 44, 54, 104, 49, 118, 49,
                104, 45, 49, 122, 32, 77, 53, 44, 54, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77,
                54, 44, 54, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 56, 44, 54, 104, 49, 118,
                49, 104, 45, 49, 122, 32, 77, 49, 48, 44, 54, 104, 49, 118, 49, 104, 45, 49, 122,
                32, 77, 49, 50, 44, 54, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 52, 44, 54,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 53, 44, 54, 104, 49, 118, 49, 104,
                45, 49, 122, 32, 77, 49, 54, 44, 54, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77,
                49, 55, 44, 54, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 56, 44, 54, 104,
                49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 57, 44, 54, 104, 49, 118, 49, 104, 45,
                49, 122, 32, 77, 50, 48, 44, 54, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49,
                48, 44, 55, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 51, 44, 56, 104, 49, 118,
                49, 104, 45, 49, 122, 32, 77, 54, 44, 56, 104, 49, 118, 49, 104, 45, 49, 122, 32,
                77, 49, 48, 44, 56, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 49, 44, 56,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 50, 44, 56, 104, 49, 118, 49, 104,
                45, 49, 122, 32, 77, 49, 53, 44, 56, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77,
                49, 54, 44, 56, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 55, 44, 56, 104,
                49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 57, 44, 56, 104, 49, 118, 49, 104, 45,
                49, 122, 32, 77, 50, 48, 44, 56, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 50,
                44, 57, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 52, 44, 57, 104, 49, 118, 49,
                104, 45, 49, 122, 32, 77, 53, 44, 57, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77,
                55, 44, 57, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 57, 44, 57, 104, 49, 118,
                49, 104, 45, 49, 122, 32, 77, 49, 52, 44, 57, 104, 49, 118, 49, 104, 45, 49, 122,
                32, 77, 49, 53, 44, 57, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 55, 44, 57,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 57, 44, 57, 104, 49, 118, 49, 104,
                45, 49, 122, 32, 77, 50, 48, 44, 57, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77,
                48, 44, 49, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 53, 44, 49, 48, 104,
                49, 118, 49, 104, 45, 49, 122, 32, 77, 54, 44, 49, 48, 104, 49, 118, 49, 104, 45,
                49, 122, 32, 77, 55, 44, 49, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 56,
                44, 49, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 49, 44, 49, 48, 104,
                49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 53, 44, 49, 48, 104, 49, 118, 49, 104,
                45, 49, 122, 32, 77, 49, 54, 44, 49, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32,
                77, 49, 55, 44, 49, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 56, 44, 49,
                48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 50, 48, 44, 49, 48, 104, 49, 118,
                49, 104, 45, 49, 122, 32, 77, 48, 44, 49, 49, 104, 49, 118, 49, 104, 45, 49, 122,
                32, 77, 49, 44, 49, 49, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 50, 44, 49, 49,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 51, 44, 49, 49, 104, 49, 118, 49, 104,
                45, 49, 122, 32, 77, 55, 44, 49, 49, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77,
                56, 44, 49, 49, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 50, 44, 49, 49,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 52, 44, 49, 49, 104, 49, 118, 49,
                104, 45, 49, 122, 32, 77, 49, 53, 44, 49, 49, 104, 49, 118, 49, 104, 45, 49, 122,
                32, 77, 49, 54, 44, 49, 49, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 57, 44,
                49, 49, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 50, 48, 44, 49, 49, 104, 49,
                118, 49, 104, 45, 49, 122, 32, 77, 51, 44, 49, 50, 104, 49, 118, 49, 104, 45, 49,
                122, 32, 77, 52, 44, 49, 50, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 53, 44,
                49, 50, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 54, 44, 49, 50, 104, 49, 118,
                49, 104, 45, 49, 122, 32, 77, 56, 44, 49, 50, 104, 49, 118, 49, 104, 45, 49, 122,
                32, 77, 57, 44, 49, 50, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 49, 44, 49,
                50, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 50, 44, 49, 50, 104, 49, 118,
                49, 104, 45, 49, 122, 32, 77, 49, 53, 44, 49, 50, 104, 49, 118, 49, 104, 45, 49,
                122, 32, 77, 49, 56, 44, 49, 50, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 56,
                44, 49, 51, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 48, 44, 49, 51, 104,
                49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 49, 44, 49, 51, 104, 49, 118, 49, 104,
                45, 49, 122, 32, 77, 49, 50, 44, 49, 51, 104, 49, 118, 49, 104, 45, 49, 122, 32,
                77, 49, 51, 44, 49, 51, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 54, 44, 49,
                51, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 56, 44, 49, 51, 104, 49, 118,
                49, 104, 45, 49, 122, 32, 77, 50, 48, 44, 49, 51, 104, 49, 118, 49, 104, 45, 49,
                122, 32, 77, 48, 44, 49, 52, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 44,
                49, 52, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 50, 44, 49, 52, 104, 49, 118,
                49, 104, 45, 49, 122, 32, 77, 51, 44, 49, 52, 104, 49, 118, 49, 104, 45, 49, 122,
                32, 77, 52, 44, 49, 52, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 53, 44, 49, 52,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 54, 44, 49, 52, 104, 49, 118, 49, 104,
                45, 49, 122, 32, 77, 57, 44, 49, 52, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77,
                49, 48, 44, 49, 52, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 50, 44, 49, 52,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 54, 44, 49, 52, 104, 49, 118, 49,
                104, 45, 49, 122, 32, 77, 49, 55, 44, 49, 52, 104, 49, 118, 49, 104, 45, 49, 122,
                32, 77, 49, 57, 44, 49, 52, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 48, 44, 49,
                53, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 54, 44, 49, 53, 104, 49, 118, 49,
                104, 45, 49, 122, 32, 77, 57, 44, 49, 53, 104, 49, 118, 49, 104, 45, 49, 122, 32,
                77, 49, 48, 44, 49, 53, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 49, 44, 49,
                53, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 51, 44, 49, 53, 104, 49, 118,
                49, 104, 45, 49, 122, 32, 77, 49, 56, 44, 49, 53, 104, 49, 118, 49, 104, 45, 49,
                122, 32, 77, 49, 57, 44, 49, 53, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 50,
                48, 44, 49, 53, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 48, 44, 49, 54, 104,
                49, 118, 49, 104, 45, 49, 122, 32, 77, 50, 44, 49, 54, 104, 49, 118, 49, 104, 45,
                49, 122, 32, 77, 51, 44, 49, 54, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 52,
                44, 49, 54, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 54, 44, 49, 54, 104, 49,
                118, 49, 104, 45, 49, 122, 32, 77, 57, 44, 49, 54, 104, 49, 118, 49, 104, 45, 49,
                122, 32, 77, 49, 48, 44, 49, 54, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49,
                51, 44, 49, 54, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 52, 44, 49, 54,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 56, 44, 49, 54, 104, 49, 118, 49,
                104, 45, 49, 122, 32, 77, 49, 57, 44, 49, 54, 104, 49, 118, 49, 104, 45, 49, 122,
                32, 77, 50, 48, 44, 49, 54, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 48, 44, 49,
                55, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 50, 44, 49, 55, 104, 49, 118, 49,
                104, 45, 49, 122, 32, 77, 51, 44, 49, 55, 104, 49, 118, 49, 104, 45, 49, 122, 32,
                77, 52, 44, 49, 55, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 54, 44, 49, 55,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 56, 44, 49, 55, 104, 49, 118, 49, 104,
                45, 49, 122, 32, 77, 57, 44, 49, 55, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77,
                49, 49, 44, 49, 55, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 50, 44, 49, 55,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 52, 44, 49, 55, 104, 49, 118, 49,
                104, 45, 49, 122, 32, 77, 49, 53, 44, 49, 55, 104, 49, 118, 49, 104, 45, 49, 122,
                32, 77, 49, 57, 44, 49, 55, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 50, 48, 44,
                49, 55, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 48, 44, 49, 56, 104, 49, 118,
                49, 104, 45, 49, 122, 32, 77, 50, 44, 49, 56, 104, 49, 118, 49, 104, 45, 49, 122,
                32, 77, 51, 44, 49, 56, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 52, 44, 49, 56,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 54, 44, 49, 56, 104, 49, 118, 49, 104,
                45, 49, 122, 32, 77, 57, 44, 49, 56, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77,
                49, 48, 44, 49, 56, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 51, 44, 49, 56,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 53, 44, 49, 56, 104, 49, 118, 49,
                104, 45, 49, 122, 32, 77, 49, 55, 44, 49, 56, 104, 49, 118, 49, 104, 45, 49, 122,
                32, 77, 49, 56, 44, 49, 56, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 50, 48, 44,
                49, 56, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 48, 44, 49, 57, 104, 49, 118,
                49, 104, 45, 49, 122, 32, 77, 54, 44, 49, 57, 104, 49, 118, 49, 104, 45, 49, 122,
                32, 77, 49, 48, 44, 49, 57, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 50, 44,
                49, 57, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 51, 44, 49, 57, 104, 49,
                118, 49, 104, 45, 49, 122, 32, 77, 49, 53, 44, 49, 57, 104, 49, 118, 49, 104, 45,
                49, 122, 32, 77, 49, 55, 44, 49, 57, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77,
                48, 44, 50, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 44, 50, 48, 104,
                49, 118, 49, 104, 45, 49, 122, 32, 77, 50, 44, 50, 48, 104, 49, 118, 49, 104, 45,
                49, 122, 32, 77, 51, 44, 50, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 52,
                44, 50, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 53, 44, 50, 48, 104, 49,
                118, 49, 104, 45, 49, 122, 32, 77, 54, 44, 50, 48, 104, 49, 118, 49, 104, 45, 49,
                122, 32, 77, 57, 44, 50, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 48,
                44, 50, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 49, 44, 50, 48, 104,
                49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 50, 44, 50, 48, 104, 49, 118, 49, 104,
                45, 49, 122, 32, 77, 49, 53, 44, 50, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32,
                77, 49, 56, 44, 50, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 57, 44, 50,
                48, 104, 49, 118, 49, 104, 45, 49, 122, 34, 32, 102, 105, 108, 108, 61, 34, 35, 48,
                48, 48, 48, 48, 48, 34, 47, 62, 10, 60, 47, 115, 118, 103, 62, 10
            ],
            buffer
        );
    }

    #[test]
    fn should_write_svg_to_buffer_no_rect() {
        // Arrange.
        let mut buffer: Vec<u8> = Vec::new();
        let qr_code = qrcodegen::QrCode::encode_text("ha", qrcodegen::QrCodeEcc::Low).unwrap();
        let exp = Exporter::new(
            qr_code,
            PathBuf::new(),
            0,
            ExportFormat::SVG,
            "".into(),
            1,
            true,
            (0, 0, 0),
            (255, 255, 255),
        );

        // Act.
        exp.export_svg(&mut buffer, &exp.qr_code, exp.border)
            .unwrap();

        // Assert.
        assert_eq!(
            vec![
                60, 63, 120, 109, 108, 32, 118, 101, 114, 115, 105, 111, 110, 61, 34, 49, 46, 48,
                34, 32, 101, 110, 99, 111, 100, 105, 110, 103, 61, 34, 85, 84, 70, 45, 56, 34, 63,
                62, 10, 60, 33, 68, 79, 67, 84, 89, 80, 69, 32, 115, 118, 103, 32, 80, 85, 66, 76,
                73, 67, 32, 34, 45, 47, 47, 87, 51, 67, 47, 47, 68, 84, 68, 32, 83, 86, 71, 32, 49,
                46, 49, 47, 47, 69, 78, 34, 32, 34, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119,
                46, 119, 51, 46, 111, 114, 103, 47, 71, 114, 97, 112, 104, 105, 99, 115, 47, 83,
                86, 71, 47, 49, 46, 49, 47, 68, 84, 68, 47, 115, 118, 103, 49, 49, 46, 100, 116,
                100, 34, 62, 10, 60, 115, 118, 103, 32, 120, 109, 108, 110, 115, 61, 34, 104, 116,
                116, 112, 58, 47, 47, 119, 119, 119, 46, 119, 51, 46, 111, 114, 103, 47, 50, 48,
                48, 48, 47, 115, 118, 103, 34, 32, 118, 101, 114, 115, 105, 111, 110, 61, 34, 49,
                46, 49, 34, 32, 118, 105, 101, 119, 66, 111, 120, 61, 34, 48, 32, 48, 32, 50, 49,
                32, 50, 49, 34, 32, 115, 116, 114, 111, 107, 101, 61, 34, 110, 111, 110, 101, 34,
                62, 10, 9, 60, 112, 97, 116, 104, 32, 100, 61, 34, 77, 48, 44, 48, 104, 49, 118,
                49, 104, 45, 49, 122, 32, 77, 49, 44, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32,
                77, 50, 44, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 51, 44, 48, 104, 49,
                118, 49, 104, 45, 49, 122, 32, 77, 52, 44, 48, 104, 49, 118, 49, 104, 45, 49, 122,
                32, 77, 53, 44, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 54, 44, 48, 104,
                49, 118, 49, 104, 45, 49, 122, 32, 77, 56, 44, 48, 104, 49, 118, 49, 104, 45, 49,
                122, 32, 77, 57, 44, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 49, 44,
                48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 52, 44, 48, 104, 49, 118, 49,
                104, 45, 49, 122, 32, 77, 49, 53, 44, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32,
                77, 49, 54, 44, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 55, 44, 48,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 56, 44, 48, 104, 49, 118, 49, 104,
                45, 49, 122, 32, 77, 49, 57, 44, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77,
                50, 48, 44, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 48, 44, 49, 104, 49,
                118, 49, 104, 45, 49, 122, 32, 77, 54, 44, 49, 104, 49, 118, 49, 104, 45, 49, 122,
                32, 77, 56, 44, 49, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 48, 44, 49,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 52, 44, 49, 104, 49, 118, 49, 104,
                45, 49, 122, 32, 77, 50, 48, 44, 49, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77,
                48, 44, 50, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 50, 44, 50, 104, 49, 118,
                49, 104, 45, 49, 122, 32, 77, 51, 44, 50, 104, 49, 118, 49, 104, 45, 49, 122, 32,
                77, 52, 44, 50, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 54, 44, 50, 104, 49,
                118, 49, 104, 45, 49, 122, 32, 77, 49, 50, 44, 50, 104, 49, 118, 49, 104, 45, 49,
                122, 32, 77, 49, 52, 44, 50, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 54,
                44, 50, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 55, 44, 50, 104, 49, 118,
                49, 104, 45, 49, 122, 32, 77, 49, 56, 44, 50, 104, 49, 118, 49, 104, 45, 49, 122,
                32, 77, 50, 48, 44, 50, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 48, 44, 51,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 50, 44, 51, 104, 49, 118, 49, 104, 45,
                49, 122, 32, 77, 51, 44, 51, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 52, 44,
                51, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 54, 44, 51, 104, 49, 118, 49, 104,
                45, 49, 122, 32, 77, 56, 44, 51, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 57,
                44, 51, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 48, 44, 51, 104, 49, 118,
                49, 104, 45, 49, 122, 32, 77, 49, 52, 44, 51, 104, 49, 118, 49, 104, 45, 49, 122,
                32, 77, 49, 54, 44, 51, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 55, 44, 51,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 56, 44, 51, 104, 49, 118, 49, 104,
                45, 49, 122, 32, 77, 50, 48, 44, 51, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77,
                48, 44, 52, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 50, 44, 52, 104, 49, 118,
                49, 104, 45, 49, 122, 32, 77, 51, 44, 52, 104, 49, 118, 49, 104, 45, 49, 122, 32,
                77, 52, 44, 52, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 54, 44, 52, 104, 49,
                118, 49, 104, 45, 49, 122, 32, 77, 56, 44, 52, 104, 49, 118, 49, 104, 45, 49, 122,
                32, 77, 57, 44, 52, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 48, 44, 52,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 52, 44, 52, 104, 49, 118, 49, 104,
                45, 49, 122, 32, 77, 49, 54, 44, 52, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77,
                49, 55, 44, 52, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 56, 44, 52, 104,
                49, 118, 49, 104, 45, 49, 122, 32, 77, 50, 48, 44, 52, 104, 49, 118, 49, 104, 45,
                49, 122, 32, 77, 48, 44, 53, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 54, 44,
                53, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 56, 44, 53, 104, 49, 118, 49, 104,
                45, 49, 122, 32, 77, 49, 49, 44, 53, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77,
                49, 50, 44, 53, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 52, 44, 53, 104,
                49, 118, 49, 104, 45, 49, 122, 32, 77, 50, 48, 44, 53, 104, 49, 118, 49, 104, 45,
                49, 122, 32, 77, 48, 44, 54, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 44,
                54, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 50, 44, 54, 104, 49, 118, 49, 104,
                45, 49, 122, 32, 77, 51, 44, 54, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 52,
                44, 54, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 53, 44, 54, 104, 49, 118, 49,
                104, 45, 49, 122, 32, 77, 54, 44, 54, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77,
                56, 44, 54, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 48, 44, 54, 104, 49,
                118, 49, 104, 45, 49, 122, 32, 77, 49, 50, 44, 54, 104, 49, 118, 49, 104, 45, 49,
                122, 32, 77, 49, 52, 44, 54, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 53,
                44, 54, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 54, 44, 54, 104, 49, 118,
                49, 104, 45, 49, 122, 32, 77, 49, 55, 44, 54, 104, 49, 118, 49, 104, 45, 49, 122,
                32, 77, 49, 56, 44, 54, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 57, 44, 54,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 50, 48, 44, 54, 104, 49, 118, 49, 104,
                45, 49, 122, 32, 77, 49, 48, 44, 55, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77,
                51, 44, 56, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 54, 44, 56, 104, 49, 118,
                49, 104, 45, 49, 122, 32, 77, 49, 48, 44, 56, 104, 49, 118, 49, 104, 45, 49, 122,
                32, 77, 49, 49, 44, 56, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 50, 44, 56,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 53, 44, 56, 104, 49, 118, 49, 104,
                45, 49, 122, 32, 77, 49, 54, 44, 56, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77,
                49, 55, 44, 56, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 57, 44, 56, 104,
                49, 118, 49, 104, 45, 49, 122, 32, 77, 50, 48, 44, 56, 104, 49, 118, 49, 104, 45,
                49, 122, 32, 77, 50, 44, 57, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 52, 44,
                57, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 53, 44, 57, 104, 49, 118, 49, 104,
                45, 49, 122, 32, 77, 55, 44, 57, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 57,
                44, 57, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 52, 44, 57, 104, 49, 118,
                49, 104, 45, 49, 122, 32, 77, 49, 53, 44, 57, 104, 49, 118, 49, 104, 45, 49, 122,
                32, 77, 49, 55, 44, 57, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 57, 44, 57,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 50, 48, 44, 57, 104, 49, 118, 49, 104,
                45, 49, 122, 32, 77, 48, 44, 49, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77,
                53, 44, 49, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 54, 44, 49, 48, 104,
                49, 118, 49, 104, 45, 49, 122, 32, 77, 55, 44, 49, 48, 104, 49, 118, 49, 104, 45,
                49, 122, 32, 77, 56, 44, 49, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49,
                49, 44, 49, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 53, 44, 49, 48,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 54, 44, 49, 48, 104, 49, 118, 49,
                104, 45, 49, 122, 32, 77, 49, 55, 44, 49, 48, 104, 49, 118, 49, 104, 45, 49, 122,
                32, 77, 49, 56, 44, 49, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 50, 48, 44,
                49, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 48, 44, 49, 49, 104, 49, 118,
                49, 104, 45, 49, 122, 32, 77, 49, 44, 49, 49, 104, 49, 118, 49, 104, 45, 49, 122,
                32, 77, 50, 44, 49, 49, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 51, 44, 49, 49,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 55, 44, 49, 49, 104, 49, 118, 49, 104,
                45, 49, 122, 32, 77, 56, 44, 49, 49, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77,
                49, 50, 44, 49, 49, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 52, 44, 49, 49,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 53, 44, 49, 49, 104, 49, 118, 49,
                104, 45, 49, 122, 32, 77, 49, 54, 44, 49, 49, 104, 49, 118, 49, 104, 45, 49, 122,
                32, 77, 49, 57, 44, 49, 49, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 50, 48, 44,
                49, 49, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 51, 44, 49, 50, 104, 49, 118,
                49, 104, 45, 49, 122, 32, 77, 52, 44, 49, 50, 104, 49, 118, 49, 104, 45, 49, 122,
                32, 77, 53, 44, 49, 50, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 54, 44, 49, 50,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 56, 44, 49, 50, 104, 49, 118, 49, 104,
                45, 49, 122, 32, 77, 57, 44, 49, 50, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77,
                49, 49, 44, 49, 50, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 50, 44, 49, 50,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 53, 44, 49, 50, 104, 49, 118, 49,
                104, 45, 49, 122, 32, 77, 49, 56, 44, 49, 50, 104, 49, 118, 49, 104, 45, 49, 122,
                32, 77, 56, 44, 49, 51, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 48, 44, 49,
                51, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 49, 44, 49, 51, 104, 49, 118,
                49, 104, 45, 49, 122, 32, 77, 49, 50, 44, 49, 51, 104, 49, 118, 49, 104, 45, 49,
                122, 32, 77, 49, 51, 44, 49, 51, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49,
                54, 44, 49, 51, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 56, 44, 49, 51,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 50, 48, 44, 49, 51, 104, 49, 118, 49,
                104, 45, 49, 122, 32, 77, 48, 44, 49, 52, 104, 49, 118, 49, 104, 45, 49, 122, 32,
                77, 49, 44, 49, 52, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 50, 44, 49, 52,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 51, 44, 49, 52, 104, 49, 118, 49, 104,
                45, 49, 122, 32, 77, 52, 44, 49, 52, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77,
                53, 44, 49, 52, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 54, 44, 49, 52, 104,
                49, 118, 49, 104, 45, 49, 122, 32, 77, 57, 44, 49, 52, 104, 49, 118, 49, 104, 45,
                49, 122, 32, 77, 49, 48, 44, 49, 52, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77,
                49, 50, 44, 49, 52, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 54, 44, 49, 52,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 55, 44, 49, 52, 104, 49, 118, 49,
                104, 45, 49, 122, 32, 77, 49, 57, 44, 49, 52, 104, 49, 118, 49, 104, 45, 49, 122,
                32, 77, 48, 44, 49, 53, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 54, 44, 49, 53,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 57, 44, 49, 53, 104, 49, 118, 49, 104,
                45, 49, 122, 32, 77, 49, 48, 44, 49, 53, 104, 49, 118, 49, 104, 45, 49, 122, 32,
                77, 49, 49, 44, 49, 53, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 51, 44, 49,
                53, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 56, 44, 49, 53, 104, 49, 118,
                49, 104, 45, 49, 122, 32, 77, 49, 57, 44, 49, 53, 104, 49, 118, 49, 104, 45, 49,
                122, 32, 77, 50, 48, 44, 49, 53, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 48,
                44, 49, 54, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 50, 44, 49, 54, 104, 49,
                118, 49, 104, 45, 49, 122, 32, 77, 51, 44, 49, 54, 104, 49, 118, 49, 104, 45, 49,
                122, 32, 77, 52, 44, 49, 54, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 54, 44,
                49, 54, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 57, 44, 49, 54, 104, 49, 118,
                49, 104, 45, 49, 122, 32, 77, 49, 48, 44, 49, 54, 104, 49, 118, 49, 104, 45, 49,
                122, 32, 77, 49, 51, 44, 49, 54, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49,
                52, 44, 49, 54, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 56, 44, 49, 54,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 57, 44, 49, 54, 104, 49, 118, 49,
                104, 45, 49, 122, 32, 77, 50, 48, 44, 49, 54, 104, 49, 118, 49, 104, 45, 49, 122,
                32, 77, 48, 44, 49, 55, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 50, 44, 49, 55,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 51, 44, 49, 55, 104, 49, 118, 49, 104,
                45, 49, 122, 32, 77, 52, 44, 49, 55, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77,
                54, 44, 49, 55, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 56, 44, 49, 55, 104,
                49, 118, 49, 104, 45, 49, 122, 32, 77, 57, 44, 49, 55, 104, 49, 118, 49, 104, 45,
                49, 122, 32, 77, 49, 49, 44, 49, 55, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77,
                49, 50, 44, 49, 55, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 52, 44, 49, 55,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 53, 44, 49, 55, 104, 49, 118, 49,
                104, 45, 49, 122, 32, 77, 49, 57, 44, 49, 55, 104, 49, 118, 49, 104, 45, 49, 122,
                32, 77, 50, 48, 44, 49, 55, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 48, 44, 49,
                56, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 50, 44, 49, 56, 104, 49, 118, 49,
                104, 45, 49, 122, 32, 77, 51, 44, 49, 56, 104, 49, 118, 49, 104, 45, 49, 122, 32,
                77, 52, 44, 49, 56, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 54, 44, 49, 56,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 57, 44, 49, 56, 104, 49, 118, 49, 104,
                45, 49, 122, 32, 77, 49, 48, 44, 49, 56, 104, 49, 118, 49, 104, 45, 49, 122, 32,
                77, 49, 51, 44, 49, 56, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 53, 44, 49,
                56, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 55, 44, 49, 56, 104, 49, 118,
                49, 104, 45, 49, 122, 32, 77, 49, 56, 44, 49, 56, 104, 49, 118, 49, 104, 45, 49,
                122, 32, 77, 50, 48, 44, 49, 56, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 48,
                44, 49, 57, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 54, 44, 49, 57, 104, 49,
                118, 49, 104, 45, 49, 122, 32, 77, 49, 48, 44, 49, 57, 104, 49, 118, 49, 104, 45,
                49, 122, 32, 77, 49, 50, 44, 49, 57, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77,
                49, 51, 44, 49, 57, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 53, 44, 49, 57,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 55, 44, 49, 57, 104, 49, 118, 49,
                104, 45, 49, 122, 32, 77, 48, 44, 50, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32,
                77, 49, 44, 50, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 50, 44, 50, 48,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 51, 44, 50, 48, 104, 49, 118, 49, 104,
                45, 49, 122, 32, 77, 52, 44, 50, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77,
                53, 44, 50, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 54, 44, 50, 48, 104,
                49, 118, 49, 104, 45, 49, 122, 32, 77, 57, 44, 50, 48, 104, 49, 118, 49, 104, 45,
                49, 122, 32, 77, 49, 48, 44, 50, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77,
                49, 49, 44, 50, 48, 104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 50, 44, 50, 48,
                104, 49, 118, 49, 104, 45, 49, 122, 32, 77, 49, 53, 44, 50, 48, 104, 49, 118, 49,
                104, 45, 49, 122, 32, 77, 49, 56, 44, 50, 48, 104, 49, 118, 49, 104, 45, 49, 122,
                32, 77, 49, 57, 44, 50, 48, 104, 49, 118, 49, 104, 45, 49, 122, 34, 32, 102, 105,
                108, 108, 61, 34, 35, 48, 48, 48, 48, 48, 48, 34, 47, 62, 10, 60, 47, 115, 118,
                103, 62, 10
            ],
            buffer
        );
    }

    #[test]
    fn should_write_png_to_buffer() {
        // Arrange.
        let mut buffer: Vec<u8> = Vec::new();
        let qr_code = qrcodegen::QrCode::encode_text("ha", qrcodegen::QrCodeEcc::Low).unwrap();
        let exp = Exporter::new(
            qr_code,
            PathBuf::new(),
            0,
            ExportFormat::SVG,
            "".into(),
            1,
            false,
            (0, 0, 0),
            (255, 255, 255),
        );

        // Act.
        exp.export_png(&mut buffer, &exp.qr_code, exp.border, exp.scale)
            .unwrap();

        // Assert.
        assert_eq!(
            vec![
                137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 21, 0, 0, 0,
                21, 8, 2, 0, 0, 0, 38, 117, 50, 193, 0, 0, 0, 247, 73, 68, 65, 84, 120, 156, 133,
                203, 1, 110, 131, 80, 12, 4, 209, 114, 255, 67, 211, 103, 13, 114, 16, 180, 202,
                74, 25, 102, 215, 63, 199, 207, 95, 57, 207, 243, 56, 230, 148, 32, 39, 248, 200,
                76, 157, 55, 222, 89, 238, 52, 202, 221, 139, 229, 250, 127, 34, 57, 242, 77, 203,
                210, 34, 249, 148, 140, 72, 30, 85, 225, 40, 22, 142, 92, 242, 41, 25, 145, 60,
                170, 194, 81, 44, 28, 185, 228, 83, 24, 110, 140, 150, 88, 69, 78, 144, 111, 44,
                115, 123, 199, 59, 167, 55, 157, 30, 153, 131, 207, 127, 241, 159, 47, 15, 246,
                188, 79, 87, 132, 163, 180, 220, 107, 126, 61, 85, 8, 242, 100, 105, 41, 42, 90,
                72, 84, 231, 167, 96, 105, 45, 237, 150, 68, 56, 22, 163, 250, 233, 98, 66, 105,
                191, 87, 142, 92, 56, 86, 231, 224, 35, 245, 98, 172, 222, 5, 249, 83, 250, 188,
                211, 11, 228, 69, 69, 11, 89, 126, 206, 247, 184, 97, 87, 78, 144, 11, 71, 149, 12,
                43, 184, 233, 144, 160, 168, 28, 121, 81, 81, 230, 227, 176, 61, 71, 78, 240, 237,
                82, 149, 249, 88, 183, 231, 113, 235, 67, 80, 170, 243, 51, 85, 36, 71, 78, 112,
                157, 44, 45, 201, 101, 184, 49, 238, 146, 35, 79, 150, 22, 153, 195, 59, 157, 189,
                195, 178, 203, 10, 242, 95, 94, 186, 59, 22, 164, 86, 230, 222, 0, 0, 0, 0, 73, 69,
                78, 68, 174, 66, 96, 130
            ],
            buffer
        );
    }
}
